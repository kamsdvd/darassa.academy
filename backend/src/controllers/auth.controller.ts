import { Request, Response } from 'express';
import { User } from '../models/user.model';
import { ResetToken } from '../models/ResetToken';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import crypto from 'crypto';
import { emailService } from '../services/email.service';
import { generateJWT, generateRandomToken } from '../common/helpers/token.helper';
import { getResetPasswordUrl, getVerificationUrl } from '../common/helpers/format.helper';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
const JWT_EXPIRES_IN = '24h'; // Token expire apr√®s 24 heures

export const register = async (req: Request, res: Response) => {
  try {
    console.log('üìù Tentative d\'inscription avec les donn√©es:', req.body);
    const { email, password, firstName, lastName, userType } = req.body;

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await User.findOne({ email });
    if (existingUser) {
      console.log('‚ùå Email d√©j√† utilis√©:', email);
      return res.status(400).json({ message: 'Cet email est d√©j√† utilis√©' });
    }

    // Cr√©er le nouvel utilisateur
    const user = new User({
      email,
      password, // Le hachage sera fait automatiquement par le middleware pre('save')
      firstName,
      lastName,
      userType,
    });

    await user.save();

    console.log('‚úÖ Utilisateur cr√©√© avec succ√®s:', user._id);

    // G√©n√©rer le token JWT
    const token = generateJWT({ id: user._id });

    res.status(201).json({
      token,
      user: {
        id: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        userType: user.userType,
      },
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'inscription:', error);
    res.status(500).json({ message: 'Erreur lors de l\'inscription' });
  }
};

export const login = async (req: Request, res: Response) => {
  try {
    console.log('üîë Tentative de connexion avec les donn√©es:', req.body);
    const { email, password } = req.body;

    // Trouver l'utilisateur
    const user = await User.findOne({ email });
    if (!user) {
      console.log('‚ùå Utilisateur non trouv√©:', email);
      return res.status(401).json({ message: 'Email ou mot de passe incorrect' });
    }

    console.log('üë§ Utilisateur trouv√©:', {
      id: user._id,
      email: user.email,
      userType: user.userType,
      hashedPassword: user.password
    });

    // V√©rifier le mot de passe en utilisant la m√©thode du mod√®le
    const isMatch = await user.comparePassword(password);
    if (!isMatch) {
      console.log('‚ùå Mot de passe invalide pour:', email);
      return res.status(401).json({ message: 'Email ou mot de passe incorrect' });
    }

    console.log('‚úÖ Connexion r√©ussie pour:', email);

    // Mettre √† jour la derni√®re connexion
    user.lastLogin = new Date();
    await user.save();

    // G√©n√©rer le token JWT
    const token = generateJWT({ id: user._id });

    res.status(200).json({
      token,
      user: {
        id: user._id,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        userType: user.userType
      }
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la connexion:', error);
    res.status(500).json({ message: 'Erreur lors de la connexion' });
  }
};

export const getProfile = async (req: Request, res: Response) => {
  try {
    const userId = req.user && typeof req.user === 'object' && ('_id' in req.user ? (req.user as any)._id : ('id' in req.user ? (req.user as any).id : undefined));
    if (!userId) {
      return res.status(401).json({ message: 'Utilisateur non authentifi√©' });
    }
    const user = await User.findById(userId).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }
    res.json(user);
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du profil:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©cup√©ration du profil' });
  }
};

export const requestPasswordReset = async (req: Request, res: Response) => {
  try {
    const { email } = req.body;
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // G√©n√©rer un token unique
    const token = generateRandomToken();
    const expiresAt = new Date(Date.now() + 3600000); // 1 heure

    // Sauvegarder le token
    const resetToken = new ResetToken({
      userId: user._id,
      token,
      expiresAt
    });

    await resetToken.save();

    // Envoyer l'email
    await emailService.sendPasswordResetEmail(email, token);

    res.status(200).json({ message: 'Email de r√©initialisation envoy√©' });
  } catch (error) {
    console.error('‚ùå Erreur lors de la demande de r√©initialisation:', error);
    res.status(500).json({ message: 'Erreur lors de la demande de r√©initialisation' });
  }
};

export const resetPassword = async (req: Request, res: Response) => {
  try {
    const { token, password } = req.body;

    // Trouver le token valide
    const resetToken = await ResetToken.findOne({
      token,
      used: false,
      expiresAt: { $gt: new Date() }
    });

    if (!resetToken) {
      return res.status(400).json({ message: 'Token invalide ou expir√©' });
    }

    // Trouver l'utilisateur
    const user = await User.findById(resetToken.userId);
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // Mettre √† jour le mot de passe
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(password, salt);
    await user.save();

    // Marquer le token comme utilis√©
    resetToken.used = true;
    await resetToken.save();

    res.status(200).json({ message: 'Mot de passe r√©initialis√© avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©initialisation du mot de passe:', error);
    res.status(500).json({ message: 'Erreur lors de la r√©initialisation du mot de passe' });
  }
};

export const verifyEmail = async (req: Request, res: Response) => {
  try {
    const { token } = req.query;

    // Trouver le token de v√©rification
    const verificationToken = await ResetToken.findOne({
      token,
      used: false,
      expiresAt: { $gt: new Date() }
    });

    if (!verificationToken) {
      return res.status(400).json({ message: 'Token invalide ou expir√©' });
    }

    // Trouver l'utilisateur
    const user = await User.findById(verificationToken.userId);
    if (!user) {
      return res.status(404).json({ message: 'Utilisateur non trouv√©' });
    }

    // Marquer l'email comme v√©rifi√©
    user.isEmailVerified = true;
    await user.save();

    // Marquer le token comme utilis√©
    verificationToken.used = true;
    await verificationToken.save();

    res.status(200).json({ message: 'Email v√©rifi√© avec succ√®s' });
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de l\'email:', error);
    res.status(500).json({ message: 'Erreur lors de la v√©rification de l\'email' });
  }
}; 