import express from 'express';
import mongoose from 'mongoose';
import cors from 'cors';
import dotenv from 'dotenv';
import authRoutes from './routes/auth.routes';
import seedDatabase from './config/seed';

// Load environment variables
dotenv.config();

const app = express();
const port = process.env.PORT || 5000;

// Middleware
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:5173',
  credentials: true
}));
app.use(express.json());

// Routes
app.use('/api/auth', authRoutes);

// Health check route
app.get('/api/health', (_req, res) => {
  res.json({ status: 'ok' });
});

const initializeDatabase = async () => {
  try {
    console.log('üîÑ Tentative de connexion √† MongoDB...');
    console.log('URI:', process.env.MONGODB_URI || 'mongodb://localhost:27017/darassa-academy');
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/darassa-academy');
    console.log('‚úÖ Connect√© √† MongoDB avec succ√®s');

    // V√©rifier si la base de donn√©es est connect√©e
    const db = mongoose.connection.db;
    if (!db) {
      throw new Error('La connexion √† la base de donn√©es n\'est pas √©tablie');
    }

    // V√©rifier si la base de donn√©es est vide
    const collections = await db.listCollections().toArray();
    const isEmpty = collections.length === 0;

    // Ex√©cuter le seed en mode d√©veloppement ou si la base est vide
    if (process.env.NODE_ENV === 'development' || isEmpty) {
      console.log(`${isEmpty ? 'üì• Base de donn√©es vide' : 'üîß Mode d√©veloppement'}, ex√©cution du seed...`);
      try {
        await seedDatabase();
        console.log('‚úÖ Base de donn√©es initialis√©e avec succ√®s');
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'initialisation de la base de donn√©es:', error);
        process.exit(1);
      }
    }

    // D√©marrer le serveur
    app.listen(port, () => {
      console.log(`‚úÖ Serveur d√©marr√© sur le port ${port}`);
      console.log(`Mode: ${process.env.NODE_ENV || 'production'}`);
      console.log(`URL: http://localhost:${port}`);
    });
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† MongoDB:', error);
    process.exit(1);
  }
};

// Initialiser la base de donn√©es et d√©marrer le serveur
initializeDatabase(); 